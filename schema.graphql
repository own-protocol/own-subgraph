type Pool @entity(immutable: false) {
  id: Bytes! # pool address
  assetSymbol: String!
  assetToken: Bytes! # xToken address
  assetTokenName: String
  assetTokenSymbol: String
  assetTokenDecimals: Int
  reserveToken: Bytes! # reserve token address
  reserveTokenSymbol: String
  reserveTokenDecimals: Int
  oracle: Oracle! # oracle
  poolStrategy: Strategy! # strategy
  poolCycleManager: Bytes!
  poolLiquidityManager: Bytes!
  poolInterestRate: BigInt # Current interest rate (scaled by BPS)
  poolUtilizationRatio: BigInt # Current utilization ratio (scaled by BPS)
  createdAt: BigInt!
  updatedAt: BigInt!
  isVerified: Boolean!

  # Asset Pool Data
  assetSupply: BigInt
  reserveBackingAsset: BigInt
  aggregatePoolReserves: BigInt
  totalUserDeposits: BigInt
  totalUserCollateral: BigInt
  cycleTotalDeposits: BigInt
  cycleTotalRedemptions: BigInt
  reserveYieldIndex: BigInt

  # Liquidity Manager Data
  totalLPLiquidityCommited: BigInt!
  totalLPCollateral: BigInt!
  lpCount: BigInt!
  cycleTotalAddLiquidityAmount: BigInt!
  cycleTotalReduceLiquidityAmount: BigInt!

  # Cycle Manager Data
  cycleState: String # enum: POOL_ACTIVE, POOL_REBALANCING_OFFCHAIN, POOL_REBALANCING_ONCHAIN, POOL_HALTED
  cycleIndex: BigInt!
  lastCycleActionDateTime: BigInt
  cyclePriceHigh: BigInt
  cyclePriceLow: BigInt
  cycleInterestAmount: BigInt
  rebalancedLPs: BigInt!
  prevRebalancePrice: BigInt!

  # Relations
  users: [UserPosition!]! @derivedFrom(field: "pool")
  lpPositions: [LPPosition!]! @derivedFrom(field: "pool")
}

type Oracle @entity(immutable: false) {
  id: Bytes! # oracle address
  assetSymbol: String!
  assetPrice: BigInt
  ohlcOpen: BigInt
  ohlcHigh: BigInt
  ohlcLow: BigInt
  ohlcClose: BigInt
  ohlcTimestamp: BigInt
  lastUpdated: BigInt
  isVerified: Boolean!
  createdAt: BigInt!
  updatedAt: BigInt!
  splitDetected: Boolean
  preSplitPrice: BigInt

  # Relations
  pool: [Pool!]! @derivedFrom(field: "oracle")
}

type Strategy @entity(immutable: false) {
  id: Bytes! # strategy address
  isVerified: Boolean!
  baseInterestRate: BigInt
  interestRate1: BigInt
  maxInterestRate: BigInt
  utilizationTier1: BigInt
  utilizationTier2: BigInt
  protocolFee: BigInt
  feeRecipient: Bytes
  isYieldBearing: Boolean

  # Collateral parameters
  userHealthyCollateralRatio: BigInt
  userLiquidationThreshold: BigInt
  lpHealthyCollateralRatio: BigInt
  lpLiquidationThreshold: BigInt
  lpLiquidationReward: BigInt

  # Cycle parameters
  rebalanceLength: BigInt
  oracleUpdateThreshold: BigInt

  #Halt parameters
  haltThreshold: BigInt
  haltLiquidityPercent: BigInt
  haltFeePercent: BigInt
  haltRequestThreshold: BigInt

  createdAt: BigInt!
  updatedAt: BigInt!

  # Relation
  pools: [Pool!]! @derivedFrom(field: "poolStrategy")
}

# Entity to track user positions
type UserPosition @entity(immutable: false) {
  id: ID! # user address + pool address
  user: Bytes! # user address
  pool: Pool!
  assetAmount: BigInt!
  depositAmount: BigInt!
  collateralAmount: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

# Entity to track user requests
type UserRequest @entity(immutable: false) {
  id: ID! # user address + pool address + requestCycle
  requestType: String! # NONE, DEPOSIT, REDEEM, LIQUIDATE
  amount: BigInt!
  collateralAmount: BigInt!
  requestCycle: BigInt!
  liquidator: Bytes # only set if requestType is LIQUIDATE
  createdAt: BigInt!
  updatedAt: BigInt!
}

# Entity to track LP positions
type LPPosition @entity(immutable: false) {
  id: ID! # lp address + pool address
  lp: Bytes! # lp address
  pool: Pool!
  liquidityCommitment: BigInt!
  collateralAmount: BigInt!
  interestAccrued: BigInt!
  delegateAddress: Bytes # address of the delegate that manages the LP rebalance
  # Health metrics
  liquidityHealth: Int # 3 = Healthy, 2 = Warning, 1 = Liquidatable
  # LP analytics
  assetShare: BigInt!
  lastRebalanceCycle: BigInt!
  lastRebalancePrice: BigInt!

  isLPActive: Boolean!

  createdAt: BigInt!
  updatedAt: BigInt!
}

# Entity to track LP requests
type LPRequest @entity(immutable: false) {
  id: ID! # lp address + pool address + requestCycle
  requestType: String! # NONE, ADD_LIQUIDITY, REDUCE_LIQUIDITY, LIQUIDATE
  requestAmount: BigInt!
  requestCycle: BigInt!
  liquidator: Bytes # only set if requestType is LIQUIDATE
  createdAt: BigInt!
  updatedAt: BigInt!
}

# Entity to track fee collection
type FeeEvent @entity(immutable: false) {
  id: ID! # tx hash + log index
  pool: Pool!
  user: Bytes!
  amount: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
}

type CycleManagerPool @entity(immutable: true) {
  id: Bytes! # cycleManager address
  pool: Bytes!
}

type LiquidityManagerPool @entity(immutable: true) {
  id: Bytes! # liquidityManager address
  pool: Bytes!
}
